name: Django CI

on:
  push: 
    branches: [ "*" ]
  pull_request:
    branches: [ main, development ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
      
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Tests and generate coverage report
      run: |
        pip install coverage
        coverage run --source='.' manage.py test
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      
  deploy:
    needs:
      - build
    
    runs-on: ubuntu-latest
    
    if: github.ref == 'refs/heads/main'
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v2

      # Set up Python 3.7 environment
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"
          
#       - uses: syphar/restore-pip-download-cache@v1
#         if: steps.cache-virtualenv.outputs.cache-hit != 'true'

#         # the package installation will only be executed when the
#         # requirements-files have changed.
#       - run: pip install -r requirements.txt
#         if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      - name: setup Virtual environment
        run: |
          ls
          python -m venv venv
          source venv/bin/activate

      # Set up cache for pip
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
#           profile_name: default
#           project_name: <your project name>
#           runtime: python3.7
#           s3_bucket: <your bucket name>
          
      # Zappa
      - name: Install Zappa
        run: |
          python -m pip install --upgrade pip
          pip install zappa
          
      - name: Deploy using Zappa
        run: |
          zappa init
          zappa deploy dev --no_venv
          
#       # Deploy main.py to AWS
#       - name: AWS Lambda Deploy
#         uses: appleboy/lambda-action@v0.0.4
#         with:
#               #name of my AWS Lambda Function
#               function_name: <your function name>
#               #contains all the files in my github repository
#               zip_file: <your function name>.zip
